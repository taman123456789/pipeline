// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Pipeline.Model.Models;

namespace Pipeline.Data.Data
{
    public partial class PipelineContext : DbContext
    {
        public PipelineContext()
        {
        }

        public PipelineContext(DbContextOptions<PipelineContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Product> Products { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(c => c.CategoryId);
                entity.ToTable("Categories", "Production");

                entity.Property(e => e.CategoryId).HasColumnName("Categories_Id");

                entity.Property(e => e.CategoriesName)
                  .IsRequired()
                  .HasColumnType("varchar(100)")
                  .IsUnicode(false)
                  .HasColumnName("Categories_Name");

                entity.Property(e => e.CategoriesParent).HasColumnName("Categories_Parent");

                entity.Property(e => e.CategoriesNotes)
                    .HasColumnType("varchar(1000)")
                    .IsUnicode(false)
                    .HasColumnName("Categories_Notes");

                entity.Property(e => e.CategoriesSortOrder).HasColumnName("Categories_SortOrder");

                entity.Property(e => e.CategoriesDescription)
                    .HasColumnType("varchar(4000)")
                    .IsUnicode(false)
                    .HasColumnName("Categories_Description");

            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customers", "Sales");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("city");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Email");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("First_Name");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.Phone)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Phone");

                entity.Property(e => e.State)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("state");

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Street");

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Zip_Code");
            });


            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => new { e.ProductId });

                entity.ToTable("Products", "Production");


                entity.Property(e => e.ProductId).HasColumnName("Products_Id");

                entity.Property(e => e.ProductName)
                   .IsRequired()
                   .HasColumnType("varchar(100)")
                   .IsUnicode(false)
                   .HasColumnName("Products_Name");

                entity.Property(e => e.ProductsDescription)
                   .HasColumnType("varchar(4000)")
                   .IsUnicode(false)
                   .HasColumnName("Products_Description");

                entity.Property(e => e.ProductsNotes)
                   .HasColumnType("varchar(4000)")
                   .IsUnicode(false)
                   .HasColumnName("Products_Notes");

                entity.Property(e => e.ProductUnitTypesId).HasColumnName("ProductUnitTypes_Id");

                entity.Property(e => e.ProductsAccuracy)
                   .HasColumnType("varchar(50)")
                   .IsUnicode(false)
                   .HasColumnName("Products_Accuracy");

                entity.Property(e => e.ProductsRounding).HasColumnName("Products_Rounding");

                entity.Property(e => e.ProductsWaste)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("Products_Waste");

                entity.Property(e => e.ProductsSupplementalToBid).HasColumnName("Products_SupplementalToBid");

                entity.Property(e => e.ProductsProjectedCost)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("Products_ProjectedCost");

                entity.Property(e => e.ProductsIsArchived).HasColumnName("Products_IsArchived");

            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}